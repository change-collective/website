---
import type { Props } from "@astrojs/starlight/props"
import type { LayoutUnion } from "../../content/loaders/payload/schema"
import LexicalRenderer from "../LexicalRenderer.astro"
import type { LexicalRoot } from "../../content/loaders/payload/schemas/lexical"
import RestrictedRenderer from "../RestrictedRenderer.astro"
import Login from "../Login.astro"

const page = Astro.props.entry.data

let content
if (page.template === "splash") {
	content = page.layout as LayoutUnion[]
} else if (page.template === "doc") {
	content = page.lexical as LexicalRoot
}
---

<div class="font-sans">
	{
		page.title === "404" ? (
			<div class="flex h-screen items-center justify-center">
				<h1 class="text-4xl">404</h1>
			</div>
		) : page.template === "splash" ? (
			page.layout.map((layoutElement) => {
				switch (layoutElement.blockType) {
					case "content":
						return (
							<div class="flex">
								{layoutElement.columns.map((colunm) => (
									<div
										class={
											colunm.size === "full"
												? "basis-full"
												: colunm.size === "half"
													? "basis-1/2"
													: colunm.size === "oneThird"
														? "basis-1/3"
														: "basis-full"
										}>
										{colunm.richText && (
											<LexicalRenderer
												children={
													colunm.richText?.root
														.children
												}
											/>
										)}
									</div>
								))}
							</div>
						)
					case "cta":
						return (
							<LexicalRenderer
								children={layoutElement.richText.root.children}
							/>
						)
					case "loginBlock":
						return (
							<Login>
								<LexicalRenderer
									children={
										layoutElement.richText.root.children
									}
								/>
							</Login>
						)
					default:
						return JSON.stringify(layoutElement)
				}
			})
		) : page.template === "doc" ? (
			page.restricted !== "public" ? (
				<RestrictedRenderer
					server:defer
					redirect={encodeURIComponent(Astro.url.pathname)}>
					<LexicalRenderer children={page.lexical.children} />
				</RestrictedRenderer>
			) : (
				<LexicalRenderer children={page.lexical.children} />
			)
		) : (
			<p>No content</p>
		)
	}
</div>
