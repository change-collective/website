---
import type { Props } from "@astrojs/starlight/props"
import LexicalRenderer from "../LexicalRenderer.astro"
import type { LexicalRoot } from "../../content/loaders/payload/schemas/lexical"
import RestrictedRenderer from "../RestrictedRenderer.astro"
import Login from "../Login.astro"
import Signup from "../SignUp/SignUp.astro"
import type { LayoutUnion } from "../../content/loaders/payload/pages/schema"
import ManifestBlock from "../ManifestBlock.astro"
import HeroHome from "../HeroHome.astro"
import LayoutRenderer from "../LayoutRenderer.astro"
import { cn } from "../../lib/cn"

const page = Astro.props.entry.data

let content
if (page.template === "splash") {
	content = page.layout as LayoutUnion[]
} else if (page.template === "doc") {
	content = page.lexical as LexicalRoot
}
---

<div class="default-layout font-sans">
	{
		page.title === "404" ? (
			<div class="flex h-screen items-center justify-center">
				<h1 class="text-4xl">404</h1>
			</div>
		) : page.template === "splash" ? (
			page.layout.map((layoutElement) => {
				switch (layoutElement.blockType) {
					case "containerBlock":
						return (
							<div
								class={cn(
									"full-bleed default-layout gap-4 py-32",
									layoutElement.color === "green" &&
										"bg-green-dark",
									layoutElement.color === "white_1" &&
										"bg-white bg-[url('/login_bg.png')]",
									layoutElement.color === "white_2" &&
										"bg-white bg-[url('/signup_bg.png')]",
								)}>
								<LayoutRenderer
									children={layoutElement.layout}
								/>
							</div>
						)
					default:
						return JSON.stringify(layoutElement)
				}
			})
		) : page.template === "doc" ? (
			page.restricted !== "public" ? (
				<RestrictedRenderer
					server:defer
					redirect={encodeURIComponent(Astro.url.pathname)}>
					<LexicalRenderer children={page.lexical.children} />
				</RestrictedRenderer>
			) : (
				<LexicalRenderer children={page.lexical.children} />
			)
		) : (
			<p>No content</p>
		)
	}
</div>
